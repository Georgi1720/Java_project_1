class Solution {
    public int maxAreaOfIsland(int[][] grid) {                                           // Задача №1
        int bigIsland = 0;
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] == 1) {
                    bigIsland = Math.max(bigIsland, dfs(i, j, grid));
                }
            }
        }
        return bigIsland;
    }

    public int dfs(int i, int j, int[][] grid) {
        if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length) {
            return 0;
        }
        if (grid[i][j] == 1) {
            grid[i][j] = 0;
            int result = dfs(i + 1, j, grid) + dfs(i - 1, j, grid)
                    + dfs(i, j - 1, grid) + dfs(i, j + 1, grid);
            return 1 + result;
        }
        return 0;
    }


    public int[][] floodFill(int[][] image, int sr, int sc, int color) {                   // Задача №2
        int oldColor = image[sr][sc];
        if (oldColor != color) {
            colorReplacement(image, sr, sc, oldColor, color);
        }
        return image;
    }

    public void colorReplacement(int[][] image, int row, int col, int oldColor, int newColor) {
        if (row < 0 || row >= image.length || col < 0 || col >= image[0].length || image[row][col] == newColor) {
            return;
        }

        if (image[row][col] == oldColor) {
            image[row][col] = newColor;
            colorReplacement(image, row - 1, col, oldColor, newColor);
            colorReplacement(image, row + 1, col, oldColor, newColor);
            colorReplacement(image, row, col - 1, oldColor, newColor);
            colorReplacement(image, row, col + 1, oldColor, newColor);
        }
    }

    /**
     * Definition for a binary tree node.                                                     // Задача №3
     * public class TreeNode {
     * int val;
     * TreeNode left;
     * TreeNode right;
     * TreeNode() {}
     * TreeNode(int val) { this.val = val; }
     * TreeNode(int val, TreeNode left, TreeNode right) {
     * this.val = val;
     * this.left = left;
     * this.right = right;
     * }
     * }
     */
    public boolean isSymmetric(TreeNode root) {
        return SymmetricStep(root, root);
    }

    private static boolean SymmetricStep(TreeNode r1, TreeNode r2) {
        if (r1 == null && r2 == null) {
            return true;
        }
        return r1 != null && r2 != null && r1.val == r2.val && SymmetricStep(r1.left, r2.right) && SymmetricStep(r1.right, r2.left);
    }
}
