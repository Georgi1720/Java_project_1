import java.util.Arrays;

public class Main {
    public static void main(String[] args) {
        System.out.println(mergeAlternately("abc", "pqr"));                 // Задача №1

        int[] somelist = {3, 4, 5, 6, 5, 5};
        int task2 = removeElement(somelist, 4);                             // Задача №2
        System.out.println(task2);

        int[] nums1 = {1, 2, 3, 0, 0, 0};                                   // Задача №3
        int[] nums2 = {2, 5, 6};
        merge(nums1, 3, nums2, 3);

        System.out.println(reverseWords(("Привет сосед как твои дела?")));  // Задача №4

        boolean result = isPalindrome("A man, a plan, a canal: Panama");   //  Задача №5
        System.out.println(result);
    }

    public static String mergeAlternately(String word1, String word2) {
        StringBuilder result = new StringBuilder();
        int longer = Math.max(word1.length(), word2.length());
        for (int i = 0; i < longer; i++) {
            if (i < word1.length()) {
                result.append(word1.charAt(i));
            }
            if (i < word2.length()) {
                result.append(word2.charAt(i));
            }
        }
        return result.toString();
    }

    public static int removeElement(int[] nums, int val) {
        int empty = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == val) {
                empty++;
            } else {
                nums[i - empty] = nums[i];
            }
        }
        return nums.length - empty;
    }

    public static void merge(int[] nums1, int m, int[] nums2, int n) {
        int i = m - 1;
        int j = n - 1;
        int k = m + n - 1;
        while (i >= 0 && j >= 0) {
            nums1[k--] = nums1[i] > nums2[j] ? nums1[i--] : nums2[j--];
        }
        while (i == -1 && j >= 0) {
            nums1[j] = nums2[j--];
        }

        System.out.println(Arrays.toString(nums1));
    }

    public static String reverseWords(String s) {
        StringBuilder sb = new StringBuilder();
        int end = s.length() - 1;
        while (end >= 0) {
            if (s.charAt(end) == ' ') {
                end -= 1;
                continue;
            }
            int start = end - 1;
            while (start >= 0 && s.charAt(start) != ' ') {
                start -= 1;
            }
            sb.append(" ");
            sb.append(s.substring(++start, ++end));
            end = start - 1;
        }
        if (sb.length() > 0) {
            sb.deleteCharAt(0);
        }
        return sb.toString();
    }

    public static boolean isPalindrome(String s) {
        int left = 0;
        int right = s.length() - 1;

        while (left < right) {
            while (left < right && !Character.isLetterOrDigit(s.charAt(left))) {
                left += 1;
            }

            while (left < right && !Character.isLetterOrDigit(s.charAt(right))) {
                right -= 1;
            }

            char leftChar = Character.toLowerCase(s.charAt(left));
            char rightChar = Character.toLowerCase(s.charAt(right));
            if (leftChar != rightChar) {
                return false;
            }

            left += 1;
            right -= 1;
        }
        return true;
    }
}
